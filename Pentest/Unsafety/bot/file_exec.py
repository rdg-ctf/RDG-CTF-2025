import time
import subprocess
import os
import logging
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import threading

UPLOAD_DIR = "/var/www/scripts"

logging.basicConfig(
    filename='/var/log/file_exec.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class ExecuteHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            filepath = event.src_path
            logging.info(f"Новый файл обнаружен: {filepath}")
            if filepath.endswith(".sh") or filepath.endswith(".py") or filepath.endswith(".pl"):
                logging.info(f"Выполнение скрипта: {filepath}")
                thread = threading.Thread(target=execute_script, args=(filepath,))
                thread.start()
            else:
                logging.warning(f"Неподдерживаемый тип файла: {filepath}")

def execute_script(filepath):
    try:
        subprocess.Popen(
            ['bash', filepath],
            stdin=subprocess.DEVNULL,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            preexec_fn=os.setpgrp
        )
        logging.info(f"Скрипт {filepath} успешно выполнен.")
    except Exception as e:
        logging.error(f"Не удалось выполнить скрипт {filepath}: {e}")

def start_monitoring():
    event_handler = ExecuteHandler()
    observer = Observer()
    observer.schedule(event_handler, UPLOAD_DIR, recursive=False)
    observer.start()
    logging.info("Сервис выполнения файлов запущен")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == "__main__":
    start_monitoring()
